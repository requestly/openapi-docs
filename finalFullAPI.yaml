openapi: 3.0.0
info:
  title: New Rules API spec
  version: 1.0.0
servers:
  - url: https://api2.requestly.io/v1

security:
  - ApiKeyAuth: []

paths:
  /rules:
    post:
      requestBody:
        content:
          application/json:
            example:
              name: "Cancel Rule for Blocked Site"
              description: "This rule blocks access to blockedsite.com"
              status: "Active"
              ruleType: "Cancel"
              pairs:
                - source:
                    key: "Url"
                    operator: "Equals"
                    value: "https://blockedsite.com"
            schema:
              $ref: '#/components/schemas/RULE_PAYLOAD'
      responses:
        '200':
          description: Rule created successfully
          content:
            application/json:
              example:
                success: true
                data:
                  id: "Cancel_a1b2c"
                  name: "Cancel Rule for Blocked Site"
                  description: "This rule blocks access to blockedsite.com"
                  status: "Active"
                  ruleType: "Cancel"
                  pairs:
                    - source:
                        key: "Url"
                        operator: "Equals"
                        value: "https://blockedsite.com"
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RuleMetaData'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedResponse'
        '429':
          description: Too Many Requests
        


    get:
      summary: Retrieve a list of rules
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          required: false
          description: The index from where the results should start. Usually set to the value received in `nextOffset` from the previous response.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 75
            default: 30
          required: false
          description: Number of results to return. Maximum value is 75.
      responses:
        '200':
          description: Rules retrieved successfully
          content:
            application/json:
              example:
                success: true
                data:
                  - id: "Redirect_fohh4"
                    name: "Sample Redirect Rule"
                    description: "This rule redirects example.com to newexample.com"
                    status: "Active"
                    ruleType: "Redirect"
                    pairs:
                      - source:
                          key: "Url"
                          operator: "Equals"
                          value: "https://example.com"
                        destinationType: "url"
                        destination: "https://newexample.com"
                  - id: "Cancel_a1b2c"
                    name: "Cancel Rule for Blocked Site"
                    description: "This rule blocks access to blockedsite.com"
                    status: "Active"
                    ruleType: "Cancel"
                    pairs:
                      - source:
                          key: "Url"
                          operator: "Equals"
                          value: "https://blockedsite.com"
                  - id: "Replace_z5x6y"
                    name: "Replace Rule for Typo"
                    description: "This rule replaces typodomain.com with correctdomain.com"
                    status: "Active"
                    ruleType: "Replace"
                    pairs:
                      - source:
                          key: "Url"
                          operator: "Equals"
                          value: "https://typodomain.com"
                        from: "typodomain.com"
                        to: "correctdomain.com"
                nextOffset: 2
                total: 10
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
                  nextOffset:
                    type: integer
                    nullable: true
                    description: The offset for the next page of results. Null if there are no more records.
                  total:
                    type: integer
                    description: Total number of records available
        '400':
          $ref: '#/components/responses/BadPageFilters'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          description: Too Many Requests
        

  /rules/{ruleId}:
    get:
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rule retrieved successfully
          content:
            application/json:
              example:
                success: true
                data:
                  id: "Redirect_fohh4"
                  name: "Sample Redirect Rule"
                  description: "This rule redirects example.com to newexample.com"
                  status: "Active"
                  ruleType: "Redirect"
                  pairs:
                    - source:
                        key: "Url"
                        operator: "Equals"
                        value: "https://example.com"
                      destinationType: "url"
                      destination: "https://newexample.com"
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items: 
                      $ref: '#/components/schemas/Rule'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          description: Too Many Requests
        

    put:
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              name: "Replace Rule for Typo"
              description: "This rule replaces typodomain.com with correctdomain.com"
              status: "Active"
              ruleType: "Replace"
              pairs:
                - source:
                    key: "Url"
                    operator: "Equals"
                    value: "https://typodomain.com"
                  from: "typodomain.com"
                  to: "correctdomain.com"
            schema:
              $ref: '#/components/schemas/RULE_PAYLOAD'
      responses:
        '200':
          description: Rule updated successfully
          content:
            application/json:
              example:
                success: true
                data:
                  id: "Replace_z5x6y"
                  name: "Replace Rule for Typo"
                  description: "This rule replaces typodomain.com with correctdomain.com"
                  status: "Active"
                  ruleType: "Replace"
                  pairs:
                    - source:
                        key: "Url"
                        operator: "Equals"
                        value: "https://typodomain.com"
                      from: "typodomain.com"
                      to: "correctdomain.com"
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RuleMetaData'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedResponse'
        '429':
          description: Too Many Requests
        

    delete:
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rule deleted successfully
          content:
            application/json:
              example:
                success: true
                message: "Rule successfully deleted."
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedResponse'
        '429':
          description: Too Many Requests
        

  /groups:
    get:
      summary: Retrieve a list of groups
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          required: false
          description: The index from where the results should start. Usually set to the value received in `nextOffset` from the previous response.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 75
            default: 30
          required: false
          description: Number of results to return. Maximum value is 75.
      responses:
        '200':
          description: List of groups retrieved successfully
          content:
            application/json:
             example:
              success: true
              data: 
                - id: "Group_1a2b3c"
                  createdBy: "user123"
                  creationDate: 1707893324459
                  currentOwnerId: "user123"
                  lastModifiedBy: "user123"
                  modificationDate: 1707893326371
                  name: "Group A"
                  objectType: "group"
                  status: "Active"
                  isFavourite: false
                - id: "Group_4d5e6f"
                  createdBy: "user456"
                  creationDate: 1707893324459
                  currentOwnerId: "user456"
                  lastModifiedBy: "user456"
                  modificationDate: 1707893326371
                  name: "Group B"
                  objectType: "group"
                  status: "Inactive"
                  isFavourite: true
              nextOffset: 2
              total: 10
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Group'
                nextOffset:
                  type: integer
                  nullable: true
                  description: The offset for the next page of results. Null if there are no more records.
                total:
                  type: integer
                  description: Total number of records available
        '400':
          $ref: '#/components/responses/BadPageFilters'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new group
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "New Awesome Group"
              status: "Active"
            schema:
              $ref: '#/components/schemas/GROUP_PAYLOAD'
      responses:
        '200':
          description: Group created successfully
          content:
            application/json:
              example:
                success: true
                data: 
                  id: "Group_7h8i9j"
                  creationDate: 1707893421467
                  modificationDate: 1707893421467
                  createdBy: "Gw9geGxr4aWejyB1erPKMnyFNNZW"
                  lastModifiedBy: "Gw9geGxr4aWejyB1erPKMnyFNNZW"
                  name: "New Group"
                  objectType: "group"
                  status: "Active"
                  isFavourite: false
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/GroupMetaData'
        '400':
          $ref: '#/components/responses/InvalidGroupPayload'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/GroupNameRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /groups/{id}:
    get:
      summary: Retrieve a specific group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group retrieved successfully
          content:
            application/json:
              example:
                success: true
                data: 
                  id: "Group_4d5e6f"
                  createdBy: "user456"
                  creationDate: 1707893324459
                  currentOwnerId: "user456"
                  lastModifiedBy: "user123"
                  modificationDate: 1707894488025
                  name: "Group B"
                  objectType: "group"
                  status: "Inactive"
                  isFavourite: true
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/InvalidGroupId'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/GroupNotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'     

    put:
      summary: Update a specific group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "Updated Group Name"
              status: "Inactive"
            schema:
              $ref: '#/components/schemas/GROUP_PAYLOAD'
      responses:
        '200':
          description: Group updated successfully
          content:
            application/json:
              example:
                success: true
                data: 
                  id: "Group_4d5e6f"
                  creationDate: 1707893421467
                  modificationDate: 1707894488025
                  createdBy: "user456"
                  lastModifiedBy: "Gw9geGxr4aWejyB1erPKMnyFNNZW"
                  name: "now this is active"
                  objectType: "group"
                  status: "Active"
                  isFavourite: false
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/GroupMetaData'
        '400':
          $ref: '#/components/responses/InvalidGroupId'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/GroupNotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a specific group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group deleted successfully
          content:
            application/json:
              example:
                success: true
                message: "Group successfully deleted."
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/InvalidGroupId'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/GroupNotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'



components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  responses:
    BadRequestResponse:
      description: Rule pairs or payload are invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
    UnauthorizedResponse:
      description: Unauthorized action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
    NotFoundResponse:
      description: Rule or group not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
    MethodNotAllowedResponse:
      description: Rule type update not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'

    BadPageFilters:
      description: Bad request due to invalid pagination parameters
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CommonResponse'
              - type: object
                properties:
                  message:
                    type: string
                    enum:
                      - "Offset should be a number"
                      - "Offset cannot be negative"
                      - "Page size should be a number"
                      - "Page size cannot be negative"

    InvalidGroupPayload:
      description: Group payload is not valid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
    InvalidGroupId:
      description: Invalid Group Id
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
    GroupNameRequired:
      description: Group name is required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
    GroupNotFoundResponse:
      description: Group not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
  schemas:
    CommonResponse:
        type: object
        properties:
          success:
            type: boolean
          message:
            type: string
    RULE_PAYLOAD:
      type: object
      required: 
        - name
        - ruleType
        - pairs
      properties:
        name:
          type: string
        description:
          type: string
          default: "Describe what the rule does"
        ruleType:
          $ref: '#/components/schemas/RuleType'
        status:
          $ref: '#/components/schemas/Status'
        groupId:
          type: string
          default: ''
        isFavourite:
          type: boolean
          default: false
        pairs:
          type: array
          default: [
            {
              "source": {
                "key": "Url",
                "operator": "Equals",
                "value": "https://www.google.com"
              },
              "destinationType": "url",
              "destination": "https://www.requestly.io"
            }
          ]
          items:
            discriminator:
              propertyName: ruleType
              mapping:
                Script: '#/components/schemas/ScriptRulePair'
                Redirect: '#/components/schemas/RedirectRulePair'
                Cancel: '#/components/schemas/CancelRulePair'
                Replace: '#/components/schemas/ReplaceRulePair'
                Headers: '#/components/schemas/HeadersRulePair'
                UserAgent: '#/components/schemas/UserAgentRulePair'
                QueryParam: '#/components/schemas/QueryParamRulePair'
                Response: '#/components/schemas/ResponseRulePair'
                Request: '#/components/schemas/RequestRulePair'
                Delay: '#/components/schemas/DelayRulePair'
            oneOf:
              - $ref: '#/components/schemas/ScriptRulePair'
              - $ref: '#/components/schemas/RedirectRulePair'
              - $ref: '#/components/schemas/CancelRulePair'
              - $ref: '#/components/schemas/ReplaceRulePair'
              - $ref: '#/components/schemas/HeadersRulePair'
              - $ref: '#/components/schemas/UserAgentRulePair'
              - $ref: '#/components/schemas/QueryParamRulePair'
              - $ref: '#/components/schemas/ResponseRulePair'
              - $ref: '#/components/schemas/RequestRulePair'
              - $ref: '#/components/schemas/DelayRulePair'

    RuleType:
      type: string
      enum: [Redirect, Cancel, Replace, Headers, UserAgent, Script, QueryParam, Response, Request, Delay]
      default: 'Redirect'

    Status:
      type: string
      enum: [Active, Inactive]
      default: 'Inactive'

    Rule:
      type: object
      properties:
        id:
          type: string
        lastModifiedBy:
          type: string
        modificationDate:
          type: integer
        creationDate:
          type: integer
        createdBy:
          type: string
        currentOwnerId:
          type: string
        name:
          type: string
        description:
          type: string
        objectType:
          type: string
          enum: [group, rule]
        ruleType:
          $ref: '#/components/schemas/RuleType'
        status:
          $ref: '#/components/schemas/Status'
        groupId:
          type: string
        pairs:
          type: array
          items:
            # $ref: '#/components/schemas/RulePair'
            discriminator:
              propertyName: ruleType
              mapping:
                Script: '#/components/schemas/ScriptRulePair'
                Redirect: '#/components/schemas/RedirectRulePair'
                Cancel: '#/components/schemas/CancelRulePair'
                Replace: '#/components/schemas/ReplaceRulePair'
                Headers: '#/components/schemas/HeadersRulePair'
                UserAgent: '#/components/schemas/UserAgentRulePair'
                QueryParam: '#/components/schemas/QueryParamRulePair'
                Response: '#/components/schemas/ResponseRulePair'
                Request: '#/components/schemas/RequestRulePair'
                Delay: '#/components/schemas/DelayRulePair'
            oneOf:
              - $ref: '#/components/schemas/ScriptRulePair'
              - $ref: '#/components/schemas/RedirectRulePair'
              - $ref: '#/components/schemas/CancelRulePair'
              - $ref: '#/components/schemas/ReplaceRulePair'
              - $ref: '#/components/schemas/HeadersRulePair'
              - $ref: '#/components/schemas/UserAgentRulePair'
              - $ref: '#/components/schemas/QueryParamRulePair'
              - $ref: '#/components/schemas/ResponseRulePair'
              - $ref: '#/components/schemas/RequestRulePair'
              - $ref: '#/components/schemas/DelayRulePair'
        isSample:
          type: boolean
        isFavourite:
          type: boolean
    RulePairSource:
      type: object
      example: {
        "key": "Url",
        "operator": "Equals",
        "value": "https://www.google.com"
      }
      required: 
        - key
        - operator
        - value
      properties:
        key:
          type: string
          enum: [Url, host, path]
          default: Url
        operator:
          type: string
          enum: [Equals, Contains, Matches, Wildcard_Matches]
          default: Equals
        value:
          type: string
        filters:
          type: array
          default: []
          items:
            type: object
            properties:
              requestMethod:
                type: array
                items:
                  type: string
                  enum: [GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS]
                  example: GET
              resourceType:
                type: array
                items:
                  type: string
                  enum: [xmlhttprequest, script, stylesheet, image, media, font, websocket, main_frame, sub_frame]
                  example: script
              requestPayload:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string

    RedirectRulePair:
      type: object
      required: 
        - source
        - destinationType
        - destination
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'
        destinationType:
          type: string
          enum: [url, map_local, mock_or_file_picker]
        destination:
          type: string

    CancelRulePair:
      type: object
      required: 
        - source
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'

    ReplaceRulePair:
      type: object
      required: 
        - source
        - from
        - to
      properties:
        source:
          $ref: '#/components/schemas/RulePairSource'
        from:
          type: string
        to:
          type: string

    HeadersRulePair:
      type: object
      required: 
        - source
        - modifications
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'
        modifications:
          type: object
          required: 
            - Request
            - Response
          default: {}
          properties:
            Request:
              type: array
              items:
                $ref: '#/components/schemas/HeadersRuleModificationData'
            Response:
              type: array
              items:
                $ref: '#/components/schemas/HeadersRuleModificationData'

    HeadersRuleModificationData:
      type: object
      required: 
        - header
        - type
      properties:
        header:
          type: string
        type:
          type: string
          enum: [Add, Remove, Modify]
          default: Add
        value:
          type: string

    UserAgentRulePair:
      type: object
      required: 
        - source
        - userAgent
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'
        userAgent:
          type: string
          default: "Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion"
          example: "Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion"
        env:
          type: string
        envType:
          type: string
          enum: [browser, device, custom]
          default: device

    QueryParamRulePair:
      type: object
      required: 
        - source
        - modifications
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'
        modifications:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/QueryParamRuleModification'

    QueryParamRuleModification:
      type: object
      required: 
        - param
        - type
      properties:
        param:
          type: string
        value:
          type: string
        type:
          type: string
          enum: [Add, Remove, Modify]
          default: Add

    ScriptRulePair:
      type: object
      required: 
        - source
        - scripts
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'
        scripts:
          type: array
          items:
            type: object
            properties:
              codeType:
                type: string
                enum: [js, css]
                default: js
              fileName:
                type: string
              loadTime:
                type: string
                default: "afterPageLoad"
              type:
                type: string
                enum: [code]
              value:
                type: string

    ResponseRulePair:
      type: object
      required: 
        - source
        - response
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'
        response:
          type: object
          example: {
            "type": "code",
            "value": 'function modifyResponse(args) {
                const {method, url, response, responseType, requestHeaders, requestData, responseJSON} = args;
                console.log("method", method)
                
                return response;
              }',
            "resourceType": "restApi",
            "statusCode": "200"
          }
          properties:
            type:
              type: string
              enum: [code, static]
              default: static
            value:
              type: string
              default: '{"foo": "bar"}'
            resourceType:
              type: string
              enum: [restApi, graphqlApi, static]
              default: restApi
            statusCode:
              type: string
              default: '200'

    RequestRulePair:
      type: object
      required: 
        - source
        - request
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'
        request:
          type: object
          properties:
            type:
              type: string
              enum: [code, static]
              default: static
            value:
              type: string
              default: '{"foo": "bar"}'
            statusCode:
              type: string
              default: '200'

    DelayRulePair:
      type: object
      required: 
        - source
        - delay
      properties:
        source: 
          $ref: '#/components/schemas/RulePairSource'
        delay:
          type: string

    RuleMetaData:
      type: object
      required:
        - id
        - lastModifiedBy
        - modificationDate
        - creationDate
        - createdBy
        - name
        - description
        - objectType
        - ruleType
        - status
        - groupId
        - pairs
        - isSample
        - isFavourite
      properties:
        id:
          type: string
        lastModifiedBy:
          type: string
        modificationDate:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        createdBy:
          type: string
        currentOwnerId:
          type: string
        name:
          type: string
        description:
          type: string
        objectType:
          type: string
          enum: [rule]
          default: rule
        ruleType:
          $ref: '#/components/schemas/RuleType'
        status:
          type: string
          enum: [Active, Inactive]
        groupId:
          type: string
          default: ""
        pairs:
          type: array
          items:
            discriminator:
              propertyName: ruleType
              mapping:
                Script: '#/components/schemas/ScriptRulePair'
                Redirect: '#/components/schemas/RedirectRulePair'
                Cancel: '#/components/schemas/CancelRulePair'
                Replace: '#/components/schemas/ReplaceRulePair'
                Headers: '#/components/schemas/HeadersRulePair'
                UserAgent: '#/components/schemas/UserAgentRulePair'
                QueryParam: '#/components/schemas/QueryParamRulePair'
                Response: '#/components/schemas/ResponseRulePair'
                Request: '#/components/schemas/RequestRulePair'
                Delay: '#/components/schemas/DelayRulePair'
            oneOf:
              - $ref: '#/components/schemas/ScriptRulePair'
              - $ref: '#/components/schemas/RedirectRulePair'
              - $ref: '#/components/schemas/CancelRulePair'
              - $ref: '#/components/schemas/ReplaceRulePair'
              - $ref: '#/components/schemas/HeadersRulePair'
              - $ref: '#/components/schemas/UserAgentRulePair'
              - $ref: '#/components/schemas/QueryParamRulePair'
              - $ref: '#/components/schemas/ResponseRulePair'
              - $ref: '#/components/schemas/RequestRulePair'
              - $ref: '#/components/schemas/DelayRulePair'
        isSample:
          type: boolean
        isFavourite:
          type: boolean

    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status: 
          $ref: '#/components/schemas/Status'
        isFavourite:
          type: boolean
        objectType:
          type: string
          enum: [group, rule]

    GROUP_PAYLOAD:
      type: object
      required: 
        - name
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/Status'
        isFavourite:
          type: boolean

    
    GroupMetaData:
      type: object
      required:
        - id
        - lastModifiedBy
        - modificationDate
        - creationDate
        - createdBy
        - name
        - objectType
        - status
        - isFavourite
      properties:
        id:
          type: string
          description: Unique identifier for the group
        lastModifiedBy:
          type: string
          description: Identifier of the last user who modified the group
        modificationDate:
          type: integer
          format: int64
          description: Timestamp of the last modification to the group
        creationDate:
          type: integer
          format: int64
          description: Timestamp of when the group was created
        createdBy:
          type: string
          description: Identifier of the user who created the group
        currentOwnerId:
          type: string
          description: Identifier of the current owner of the group
        name:
          type: string
          description: Name of the group
        objectType:
          type: string
          enum: [group]
          default: group
          description: Type of the object, which is 'group' in this case
        status:
          type: string
          enum: [Active, Inactive]
          description: Status of the group, either Active or Inactive
        isFavourite:
          type: boolean
          description: Indicates whether the group is pinned or not

